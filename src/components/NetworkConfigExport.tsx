import React, { useState } from 'react';
import { Download, FileText, Terminal, Code, Check, Copy } from 'lucide-react';
import Card from './common/Card';
import Button from './ui/Button';
import CodeBlock from './ui/CodeBlock';
import { NetworkConfig } from '../types';

interface NetworkConfigExportProps {
  config: NetworkConfig;
  isDark: boolean;
}

const NetworkConfigExport: React.FC<NetworkConfigExportProps> = ({ config, isDark }) => {
  const [activeTab, setActiveTab] = useState<'configtx' | 'crypto-config' | 'docker-compose' | 'network-script'>('configtx');
  const [copied, setCopied] = useState(false);
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const downloadFile = (content: string, filename: string) => {
    const blob = new Blob([content], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const downloadAllFiles = () => {
    try {
      // Use dynamic import to load JSZip only when needed
      import('jszip').then((JSZipModule) => {
        const JSZip = JSZipModule.default;
        const zip = new JSZip();
        
        // Add configuration files to zip
        zip.file('configtx.yaml', generateConfigtxYaml(config));
        zip.file('crypto-config.yaml', generateCryptoConfigYaml(config));
        zip.file('docker-compose.yaml', generateDockerComposeYaml(config));
        zip.file('network.sh', generateNetworkScript(config));
        
        // Generate zip file
        zip.generateAsync({ type: 'blob' }).then((content) => {
          // Create download link
          const url = URL.createObjectURL(content);
          const a = document.createElement('a');
          a.href = url;
          a.download = 'fabric-network-configs.zip';
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        });
      });
    } catch (error) {
      console.error('Error creating zip file:', error);
      alert('Failed to create zip file. Please try downloading files individually.');
    }
  };

  // Generate configtx.yaml content
  const generateConfigtxYaml = (config: NetworkConfig): string => {
    const organizations = config.organizations.map(org => {
      return `  - &${org.mspID || `${org.name}MSP`}
    Name: ${org.mspID || `${org.name}MSP`}
    ID: ${org.mspID || `${org.name}MSP`}
    MSPDir: crypto-config/peerOrganizations/${org.domain}/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('${org.mspID || `${org.name}MSP`}.admin', '${org.mspID || `${org.name}MSP`}.peer', '${org.mspID || `${org.name}MSP`}.client')"
      Writers:
        Type: Signature
        Rule: "OR('${org.mspID || `${org.name}MSP`}.admin', '${org.mspID || `${org.name}MSP`}.client')"
      Admins:
        Type: Signature
        Rule: "OR('${org.mspID || `${org.name}MSP`}.admin')"
      Endorsement:
        Type: Signature
        Rule: "OR('${org.mspID || `${org.name}MSP`}.peer')"
    AnchorPeers:
      - Host: ${org.peers[0]?.name || 'peer0'}.${org.domain}
        Port: ${org.peers[0]?.port || 7051}`;
    }).join('\n\n');

    const ordererOrg = config.orderers.length > 0 ? 
      `  - &OrdererOrg
    Name: OrdererOrg
    ID: OrdererMSP
    MSPDir: crypto-config/ordererOrganizations/${config.orderers[0].domain}/msp
    Policies:
      Readers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
      Writers:
        Type: Signature
        Rule: "OR('OrdererMSP.member')"
      Admins:
        Type: Signature
        Rule: "OR('OrdererMSP.admin')"` : '';

    const ordererAddresses = config.orderers.map(orderer => 
      `    - ${orderer.name}.${orderer.domain}:${orderer.port}`
    ).join('\n');

    const channelName = config.channelName || 'mychannel';
    const consortium = config.consortium || 'SampleConsortium';

    return `# 
# Hyperledger Fabric configtx.yaml
# Generated by Fabric Network Constructor
#
---
Organizations:
${organizations}

${ordererOrg}

Capabilities:
  Channel: &ChannelCapabilities
    V2_0: true
  Orderer: &OrdererCapabilities
    V2_0: true
  Application: &ApplicationCapabilities
    V2_0: true

Application: &ApplicationDefaults
  Organizations:
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    LifecycleEndorsement:
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"
    Endorsement:
      Type: ImplicitMeta
      Rule: "MAJORITY Endorsement"
  Capabilities:
    <<: *ApplicationCapabilities

Orderer: &OrdererDefaults
  OrdererType: ${config.orderers[0]?.type || 'etcdraft'}
  Addresses:
${ordererAddresses}
  BatchTimeout: ${config.orderers[0]?.batchTimeout || '2s'}
  BatchSize:
    MaxMessageCount: ${config.orderers[0]?.batchSize?.maxMessageCount || 500}
    AbsoluteMaxBytes: ${config.orderers[0]?.batchSize?.absoluteMaxBytes || 10485760}
    PreferredMaxBytes: ${config.orderers[0]?.batchSize?.preferredMaxBytes || 2097152}
  Organizations:
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    BlockValidation:
      Type: ImplicitMeta
      Rule: "ANY Writers"
  Capabilities:
    <<: *OrdererCapabilities

Channel: &ChannelDefaults
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
  Capabilities:
    <<: *ChannelCapabilities

Profiles:
  ${channelName}Genesis:
    <<: *ChannelDefaults
    Orderer:
      <<: *OrdererDefaults
      Organizations:
        - *OrdererOrg
    Consortiums:
      ${consortium}:
        Organizations:
${config.organizations.map(org => `          - *${org.mspID || `${org.name}MSP`}`).join('\n')}
  ${channelName}Channel:
    <<: *ChannelDefaults
    Consortium: ${consortium}
    Application:
      <<: *ApplicationDefaults
      Organizations:
${config.organizations.map(org => `        - *${org.mspID || `${org.name}MSP`}`).join('\n')}
      Capabilities:
        <<: *ApplicationCapabilities`;
  };

  // Generate crypto-config.yaml content
  const generateCryptoConfigYaml = (config: NetworkConfig): string => {
    const peerOrgs = config.organizations.map(org => {
      return `  - Name: ${org.name}
    Domain: ${org.domain}
    EnableNodeOUs: true
    Template:
      Count: ${org.peers.length}
    Users:
      Count: 1
    Specs:
${org.peers.map((peer, index) => `      - Hostname: ${peer.name}`).join('\n')}`;
    }).join('\n\n');

    const ordererOrg = config.orderers.length > 0 ? 
      `  - Name: Orderer
    Domain: ${config.orderers[0].domain}
    EnableNodeOUs: true
    Specs:
${config.orderers.map(orderer => `      - Hostname: ${orderer.name}`).join('\n')}` : '';

    return `# 
# Hyperledger Fabric crypto-config.yaml
# Generated by Fabric Network Constructor
#
---
OrdererOrgs:
${ordererOrg}

PeerOrgs:
${peerOrgs}`;
  };

  // Generate docker-compose.yaml content
  const generateDockerComposeYaml = (config: NetworkConfig): string => {
    const ordererServices = config.orderers.map(orderer => {
      return `  ${orderer.name}.${orderer.domain}:
    container_name: ${orderer.name}.${orderer.domain}
    image: hyperledger/fabric-orderer:2.4
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=${orderer.port}
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443
      - ORDERER_METRICS_PROVIDER=prometheus
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./crypto-config/ordererOrganizations/${orderer.domain}/orderers/${orderer.name}.${orderer.domain}/msp:/var/hyperledger/orderer/msp
      - ./crypto-config/ordererOrganizations/${orderer.domain}/orderers/${orderer.name}.${orderer.domain}/tls:/var/hyperledger/orderer/tls
      - ${orderer.name}.${orderer.domain}:/var/hyperledger/production/orderer
    ports:
      - ${orderer.port}:${orderer.port}
      - 8443:8443
    networks:
      - ${config.channelName || 'fabric'}`;
    }).join('\n\n');

    const peerServices = [];
    config.organizations.forEach(org => {
      org.peers.forEach(peer => {
        const couchDBPort = peer.couchDBPort || 5984;
        const chaincodePort = peer.chaincodePort || 7052;
        
        // Add CouchDB service if using CouchDB
        if (peer.couchDBPort) {
          peerServices.push(`  couchdb.${peer.name}.${org.domain}:
    container_name: couchdb.${peer.name}.${org.domain}
    image: couchdb:3.1.1
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    ports:
      - ${couchDBPort}:5984
    networks:
      - ${config.channelName || 'fabric'}
    volumes:
      - couchdb.${peer.name}.${org.domain}:/opt/couchdb/data`);
        }
        
        // Add peer service
        peerServices.push(`  ${peer.name}.${org.domain}:
    container_name: ${peer.name}.${org.domain}
    image: hyperledger/fabric-peer:2.4
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${config.channelName || 'fabric'}_${config.channelName || 'fabric'}
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_PEER_ID=${peer.name}.${org.domain}
      - CORE_PEER_ADDRESS=${peer.name}.${org.domain}:${peer.port}
      - CORE_PEER_LISTENADDRESS=0.0.0.0:${peer.port}
      - CORE_PEER_CHAINCODEADDRESS=${peer.name}.${org.domain}:${chaincodePort}
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:${chaincodePort}
      - CORE_PEER_GOSSIP_BOOTSTRAP=${peer.name}.${org.domain}:${peer.port}
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=${peer.name}.${org.domain}:${peer.port}
      - CORE_PEER_LOCALMSPID=${org.mspID || `${org.name}MSP`}
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443
      - CORE_METRICS_PROVIDER=prometheus
      ${peer.couchDBPort ? `- CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb.${peer.name}.${org.domain}:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw` : ''}
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./crypto-config/peerOrganizations/${org.domain}/peers/${peer.name}.${org.domain}/msp:/etc/hyperledger/fabric/msp
      - ./crypto-config/peerOrganizations/${org.domain}/peers/${peer.name}.${org.domain}/tls:/etc/hyperledger/fabric/tls
      - ${peer.name}.${org.domain}:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    ports:
      - ${peer.port}:${peer.port}
      - ${chaincodePort}:${chaincodePort}
      - 9443:9443
    networks:
      - ${config.channelName || 'fabric'}
    depends_on:
      ${peer.couchDBPort ? `- couchdb.${peer.name}.${org.domain}` : ''}`);
      });
    });

    // CLI service
    const cliService = config.organizations.length > 0 && config.organizations[0].peers.length > 0 ? 
      `  cli:
    container_name: cli
    image: hyperledger/fabric-tools:2.4
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=${config.organizations[0].peers[0].name}.${config.organizations[0].domain}:${config.organizations[0].peers[0].port}
      - CORE_PEER_LOCALMSPID=${config.organizations[0].mspID || `${config.organizations[0].name}MSP`}
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0].domain}/peers/${config.organizations[0].peers[0].name}.${config.organizations[0].domain}/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0].domain}/peers/${config.organizations[0].peers[0].name}.${config.organizations[0].domain}/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0].domain}/peers/${config.organizations[0].peers[0].name}.${config.organizations[0].domain}/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0].domain}/users/Admin@${config.organizations[0].domain}/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ./chaincode/:/opt/gopath/src/github.com/chaincode
      - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
      - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    networks:
      - ${config.channelName || 'fabric'}
    depends_on:
      - ${config.organizations[0].peers[0].name}.${config.organizations[0].domain}` : '';

    // Volumes
    const volumes = [];
    config.orderers.forEach(orderer => {
      volumes.push(`  ${orderer.name}.${orderer.domain}:`);
    });
    
    config.organizations.forEach(org => {
      org.peers.forEach(peer => {
        volumes.push(`  ${peer.name}.${org.domain}:`);
        
        if (peer.couchDBPort) {
          volumes.push(`  couchdb.${peer.name}.${org.domain}:`);
        }
      });
    });

    return `# 
# Hyperledger Fabric docker-compose.yaml
# Generated by Fabric Network Constructor
#
version: '2'

networks:
  ${config.channelName || 'fabric'}:

services:
${ordererServices}

${peerServices.join('\n\n')}

${cliService}

volumes:
${volumes.join('\n')}`;
  };

  // Generate network.sh script
  const generateNetworkScript = (config: NetworkConfig): string => {
    const channelName = config.channelName || 'mychannel';
    const ccName = "basic"; // Define ccName variable
    const ccSrcPath = "../chaincode/asset-transfer-basic/chaincode-go"; // Define ccSrcPath variable
    const ccRuntimeLanguage = "golang"; // Define ccRuntimeLanguage variable
    
    return `#!/bin/bash
#
# Hyperledger Fabric Network Management Script
# Generated by Fabric Network Constructor
#

# Default values
CHANNEL_NAME="${channelName}"
CC_NAME="${ccName}"
CC_VERSION="1.0"
CC_SEQUENCE="1"
CC_SRC_PATH="${ccSrcPath}"
CC_RUNTIME_LANGUAGE="${ccRuntimeLanguage}"
DELAY="3"
MAX_RETRY="5"
VERBOSE="false"

# Print usage
function printHelp() {
  echo "Usage: "
  echo "  network.sh <Mode> [Flags]"
  echo "    Modes:"
  echo "      up - Bring up the network"
  echo "      down - Bring down the network"
  echo "      restart - Restart the network"
  echo "      createChannel - Create and join a channel"
  echo "      deployCC - Deploy chaincode"
  echo "    Flags:"
  echo "      -c <channel name> - Channel name (default \\"${channelName}\\")"
  echo "      -ca - Deploy Certificate Authority"
  echo "      -s <dbtype> - Database type (goleveldb or couchdb)"
  echo "      -ccl <language> - Chaincode language (golang, javascript, typescript)"
  echo "      -ccp <path> - Chaincode path"
  echo "      -ccn <name> - Chaincode name"
  echo "      -ccv <version> - Chaincode version"
  echo "      -ccs <sequence> - Chaincode sequence"
  echo "      -verbose - Verbose mode"
  echo "      -h - Print this message"
}

# Generate crypto materials
function generateCryptoMaterials() {
  echo "Generating crypto materials..."
  
  # Create crypto-config directory if it doesn't exist
  mkdir -p crypto-config
  
  # Generate crypto materials using cryptogen
  cryptogen generate --config=./crypto-config.yaml --output="crypto-config"
  
  echo "Crypto materials generated successfully"
}

# Generate channel artifacts
function generateChannelArtifacts() {
  echo "Generating channel artifacts..."
  
  # Create channel-artifacts directory if it doesn't exist
  mkdir -p channel-artifacts
  
  # Generate genesis block for the channel
  configtxgen -profile ${channelName}Genesis -channelID system-channel -outputBlock ./channel-artifacts/genesis.block
  
  # Generate channel creation transaction
  configtxgen -profile ${channelName}Channel -outputCreateChannelTx ./channel-artifacts/${channelName}.tx -channelID $CHANNEL_NAME
  
  # Generate anchor peer updates for each org
${config.organizations.map(org => `  configtxgen -profile ${channelName}Channel -outputAnchorPeersUpdate ./channel-artifacts/${org.mspID || `${org.name}MSP`}anchors.tx -channelID $CHANNEL_NAME -asOrg ${org.mspID || `${org.name}MSP`}`).join('\n  ')}
  
  echo "Channel artifacts generated successfully"
}

# Bring up the network
function networkUp() {
  # Generate crypto materials
  generateCryptoMaterials
  
  # Generate channel artifacts
  generateChannelArtifacts
  
  # Start the network
  docker-compose -f docker-compose.yaml up -d
  
  echo "Waiting for network to start..."
  sleep $DELAY
  echo "Network is up"
}

# Bring down the network
function networkDown() {
  # Stop and remove containers
  docker-compose -f docker-compose.yaml down --volumes --remove-orphans
  
  # Remove crypto materials and channel artifacts
  rm -rf crypto-config channel-artifacts
  
  echo "Network is down"
}

# Create and join channel
function createChannel() {
  # Create channel
  echo "Creating channel..."
  docker exec cli peer channel create -o orderer.${config.orderers[0]?.domain || 'example.com'}:${config.orderers[0]?.port || 7050} -c $CHANNEL_NAME -f ./channel-artifacts/${channelName}.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/${config.orderers[0]?.domain || 'example.com'}/orderers/orderer.${config.orderers[0]?.domain || 'example.com'}/msp/tlscacerts/tlsca.${config.orderers[0]?.domain || 'example.com'}-cert.pem
  
  # Join peers to channel
  echo "Joining peers to channel..."
${config.organizations.map(org => org.peers.map(peer => `  docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/users/Admin@${org.domain}/msp -e CORE_PEER_ADDRESS=${peer.name}.${org.domain}:${peer.port} -e CORE_PEER_LOCALMSPID=${org.mspID || `${org.name}MSP`} -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/peers/${peer.name}.${org.domain}/tls/ca.crt cli peer channel join -b ${channelName}.block`).join('\n  ')).join('\n  ')}
  
  # Update anchor peers
  echo "Updating anchor peers..."
${config.organizations.map(org => `  docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/users/Admin@${org.domain}/msp -e CORE_PEER_ADDRESS=${org.peers[0]?.name || 'peer0'}.${org.domain}:${org.peers[0]?.port || 7051} -e CORE_PEER_LOCALMSPID=${org.mspID || `${org.name}MSP`} -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/peers/${org.peers[0]?.name || 'peer0'}.${org.domain}/tls/ca.crt cli peer channel update -o orderer.${config.orderers[0]?.domain || 'example.com'}:${config.orderers[0]?.port || 7050} -c $CHANNEL_NAME -f ./channel-artifacts/${org.mspID || `${org.name}MSP`}anchors.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/${config.orderers[0]?.domain || 'example.com'}/orderers/orderer.${config.orderers[0]?.domain || 'example.com'}/msp/tlscacerts/tlsca.${config.orderers[0]?.domain || 'example.com'}-cert.pem`).join('\n  ')}
  
  echo "Channel created and joined successfully"
}

# Deploy chaincode
function deployChaincode() {
  echo "Deploying chaincode..."
  
  # Package chaincode
  echo "Packaging chaincode..."
  docker exec cli peer lifecycle chaincode package ${ccName}.tar.gz --path ${CC_SRC_PATH} --lang ${CC_RUNTIME_LANGUAGE} --label ${ccName}_${CC_VERSION}
  
  # Install chaincode on all peers
  echo "Installing chaincode on peers..."
${config.organizations.map(org => org.peers.map(peer => `  docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/users/Admin@${org.domain}/msp -e CORE_PEER_ADDRESS=${peer.name}.${org.domain}:${peer.port} -e CORE_PEER_LOCALMSPID=${org.mspID || `${org.name}MSP`} -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/peers/${peer.name}.${org.domain}/tls/ca.crt cli peer lifecycle chaincode install ${ccName}.tar.gz`).join('\n  ')).join('\n  ')}
  
  # Get package ID
  echo "Getting chaincode package ID..."
  PACKAGE_ID=$(docker exec cli peer lifecycle chaincode queryinstalled | grep "${ccName}_${CC_VERSION}" | awk '{print $3}' | sed 's/,//')
  
  # Approve chaincode for organizations
  echo "Approving chaincode for organizations..."
${config.organizations.map(org => `  docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/users/Admin@${org.domain}/msp -e CORE_PEER_ADDRESS=${org.peers[0]?.name || 'peer0'}.${org.domain}:${org.peers[0]?.port || 7051} -e CORE_PEER_LOCALMSPID=${org.mspID || `${org.name}MSP`} -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/peers/${org.peers[0]?.name || 'peer0'}.${org.domain}/tls/ca.crt cli peer lifecycle chaincode approveformyorg -o orderer.${config.orderers[0]?.domain || 'example.com'}:${config.orderers[0]?.port || 7050} --channelID $CHANNEL_NAME --name ${ccName} --version ${CC_VERSION} --package-id $PACKAGE_ID --sequence ${CC_SEQUENCE} --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/${config.orderers[0]?.domain || 'example.com'}/orderers/orderer.${config.orderers[0]?.domain || 'example.com'}/msp/tlscacerts/tlsca.${config.orderers[0]?.domain || 'example.com'}-cert.pem`).join('\n  ')}
  
  # Check commit readiness
  echo "Checking commit readiness..."
  docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0]?.domain || 'org1.example.com'}/users/Admin@${config.organizations[0]?.domain || 'org1.example.com'}/msp -e CORE_PEER_ADDRESS=${config.organizations[0]?.peers[0]?.name || 'peer0'}.${config.organizations[0]?.domain || 'org1.example.com'}:${config.organizations[0]?.peers[0]?.port || 7051} -e CORE_PEER_LOCALMSPID=${config.organizations[0]?.mspID || `${config.organizations[0]?.name}MSP` || 'Org1MSP'} -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0]?.domain || 'org1.example.com'}/peers/${config.organizations[0]?.peers[0]?.name || 'peer0'}.${config.organizations[0]?.domain || 'org1.example.com'}/tls/ca.crt cli peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name ${ccName} --version ${CC_VERSION} --sequence ${CC_SEQUENCE} --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/${config.orderers[0]?.domain || 'example.com'}/orderers/orderer.${config.orderers[0]?.domain || 'example.com'}/msp/tlscacerts/tlsca.${config.orderers[0]?.domain || 'example.com'}-cert.pem --output json
  
  # Commit chaincode definition
  echo "Committing chaincode definition..."
  docker exec -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0]?.domain || 'org1.example.com'}/users/Admin@${config.organizations[0]?.domain || 'org1.example.com'}/msp -e CORE_PEER_ADDRESS=${config.organizations[0]?.peers[0]?.name || 'peer0'}.${config.organizations[0]?.domain || 'org1.example.com'}:${config.organizations[0]?.peers[0]?.port || 7051} -e CORE_PEER_LOCALMSPID=${config.organizations[0]?.mspID || `${config.organizations[0]?.name}MSP` || 'Org1MSP'} -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${config.organizations[0]?.domain || 'org1.example.com'}/peers/${config.organizations[0]?.peers[0]?.name || 'peer0'}.${config.organizations[0]?.domain || 'org1.example.com'}/tls/ca.crt cli peer lifecycle chaincode commit -o orderer.${config.orderers[0]?.domain || 'example.com'}:${config.orderers[0]?.port || 7050} --channelID $CHANNEL_NAME --name ${ccName} --version ${CC_VERSION} --sequence ${CC_SEQUENCE} --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/${config.orderers[0]?.domain || 'example.com'}/orderers/orderer.${config.orderers[0]?.domain || 'example.com'}/msp/tlscacerts/tlsca.${config.orderers[0]?.domain || 'example.com'}-cert.pem ${config.organizations.map(org => `--peerAddresses ${org.peers[0]?.name || 'peer0'}.${org.domain}:${org.peers[0]?.port || 7051} --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/${org.domain}/peers/${org.peers[0]?.name || 'peer0'}.${org.domain}/tls/ca.crt`).join(' ')}
  
  echo "Chaincode deployed successfully"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
  up)
    MODE="up"
    shift
    ;;
  down)
    MODE="down"
    shift
    ;;
  restart)
    MODE="restart"
    shift
    ;;
  createChannel)
    MODE="createChannel"
    shift
    ;;
  deployCC)
    MODE="deployCC"
    shift
    ;;
  -h)
    printHelp
    exit 0
    ;;
  -c)
    CHANNEL_NAME="$2"
    shift
    shift
    ;;
  -ca)
    CRYPTO="Certificate Authorities"
    shift
    ;;
  -s)
    DB_TYPE="$2"
    shift
    shift
    ;;
  -ccl)
    CC_RUNTIME_LANGUAGE="$2"
    shift
    shift
    ;;
  -ccp)
    CC_SRC_PATH="$2"
    shift
    shift
    ;;
  -ccn)
    CC_NAME="$2"
    shift
    shift
    ;;
  -ccv)
    CC_VERSION="$2"
    shift
    shift
    ;;
  -ccs)
    CC_SEQUENCE="$2"
    shift
    shift
    ;;
  -verbose)
    VERBOSE=true
    shift
    ;;
  *)
    echo "Unknown flag: $key"
    printHelp
    exit 1
    ;;
  esac
done

# Execute mode
case $MODE in
"up")
  networkUp
  ;;
"down")
  networkDown
  ;;
"restart")
  networkDown
  networkUp
  ;;
"createChannel")
  createChannel
  ;;
"deployCC")
  deployChaincode
  ;;
*)
  printHelp
  exit 1
  ;;
esac
`;
  };

  return (
    <div className="space-y-6">
      <Card isDark={isDark}>
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center">
            <FileText className="h-6 w-6 text-indigo-600 dark:text-indigo-400 mr-2" />
            <h2 className="text-lg font-medium">Network Configuration Files</h2>
          </div>
          <Button
            onClick={downloadAllFiles}
            variant="primary"
            icon={Download}
          >
            Download All Files
          </Button>
        </div>

        <div className="mb-6">
          <div className="flex space-x-2 mb-4 overflow-x-auto pb-2">
            <Button
              onClick={() => setActiveTab('configtx')}
              variant={activeTab === 'configtx' ? 'primary' : 'outline'}
            >
              configtx.yaml
            </Button>
            <Button
              onClick={() => setActiveTab('crypto-config')}
              variant={activeTab === 'crypto-config' ? 'primary' : 'outline'}
            >
              crypto-config.yaml
            </Button>
            <Button
              onClick={() => setActiveTab('docker-compose')}
              variant={activeTab === 'docker-compose' ? 'primary' : 'outline'}
            >
              docker-compose.yaml
            </Button>
            <Button
              onClick={() => setActiveTab('network-script')}
              variant={activeTab === 'network-script' ? 'primary' : 'outline'}
            >
              network.sh
            </Button>
          </div>

          {activeTab === 'configtx' && (
            <div>
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium">configtx.yaml</h3>
                <div className="flex space-x-2">
                  <Button
                    onClick={() => copyToClipboard(generateConfigtxYaml(config))}
                    variant="outline"
                    size="sm"
                    icon={copied ? Check : Copy}
                  >
                    {copied ? 'Copied' : 'Copy'}
                  </Button>
                  <Button
                    onClick={() => downloadFile(generateConfigtxYaml(config), 'configtx.yaml')}
                    variant="outline"
                    size="sm"
                    icon={Download}
                  >
                    Download
                  </Button>
                </div>
              </div>
              <CodeBlock
                code={generateConfigtxYaml(config)}
                language="yaml"
                showLineNumbers={true}
                isDark={isDark}
              />
            </div>
          )}

          {activeTab === 'crypto-config' && (
            <div>
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium">crypto-config.yaml</h3>
                <div className="flex space-x-2">
                  <Button
                    onClick={() => copyToClipboard(generateCryptoConfigYaml(config))}
                    variant="outline"
                    size="sm"
                    icon={copied ? Check : Copy}
                  >
                    {copied ? 'Copied' : 'Copy'}
                  </Button>
                  <Button
                    onClick={() => downloadFile(generateCryptoConfigYaml(config), 'crypto-config.yaml')}
                    variant="outline"
                    size="sm"
                    icon={Download}
                  >
                    Download
                  </Button>
                </div>
              </div>
              <CodeBlock
                code={generateCryptoConfigYaml(config)}
                language="yaml"
                showLineNumbers={true}
                isDark={isDark}
              />
            </div>
          )}

          {activeTab === 'docker-compose' && (
            <div>
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium">docker-compose.yaml</h3>
                <div className="flex space-x-2">
                  <Button
                    onClick={() => copyToClipboard(generateDockerComposeYaml(config))}
                    variant="outline"
                    size="sm"
                    icon={copied ? Check : Copy}
                  >
                    {copied ? 'Copied' : 'Copy'}
                  </Button>
                  <Button
                    onClick={() => downloadFile(generateDockerComposeYaml(config), 'docker-compose.yaml')}
                    variant="outline"
                    size="sm"
                    icon={Download}
                  >
                    Download
                  </Button>
                </div>
              </div>
              <CodeBlock
                code={generateDockerComposeYaml(config)}
                language="yaml"
                showLineNumbers={true}
                isDark={isDark}
              />
            </div>
          )}

          {activeTab === 'network-script' && (
            <div>
              <div className="flex items-center justify-between mb-2">
                <h3 className="text-sm font-medium">network.sh</h3>
                <div className="flex space-x-2">
                  <Button
                    onClick={() => copyToClipboard(generateNetworkScript(config))}
                    variant="outline"
                    size="sm"
                    icon={copied ? Check : Copy}
                  >
                    {copied ? 'Copied' : 'Copy'}
                  </Button>
                  <Button
                    onClick={() => downloadFile(generateNetworkScript(config), 'network.sh')}
                    variant="outline"
                    size="sm"
                    icon={Download}
                  >
                    Download
                  </Button>
                </div>
              </div>
              <CodeBlock
                code={generateNetworkScript(config)}
                language="bash"
                showLineNumbers={true}
                isDark={isDark}
              />
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 className="text-sm font-medium mb-2">Configuration Summary</h3>
            <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-800' : 'bg-gray-50'}`}>
              <div className="space-y-2 text-sm">
                <div>
                  <span className="font-medium">Channel Name:</span> {config.channelName || 'mychannel'}
                </div>
                <div>
                  <span className="font-medium">Consortium:</span> {config.consortium || 'SampleConsortium'}
                </div>
                <div>
                  <span className="font-medium">Network Version:</span> {config.networkVersion || '2.0'}
                </div>
                <div>
                  <span className="font-medium">State Database:</span> {config.stateDatabase || 'CouchDB'}
                </div>
                <div>
                  <span className="font-medium">Organizations:</span> {config.organizations.length}
                </div>
                <div>
                  <span className="font-medium">Total Peers:</span> {config.organizations.reduce((sum, org) => sum + org.peers.length, 0)}
                </div>
                <div>
                  <span className="font-medium">Orderers:</span> {config.orderers.length}
                </div>
                <div>
                  <span className="font-medium">Orderer Type:</span> {config.orderers[0]?.type || 'etcdraft'}
                </div>
              </div>
            </div>
          </div>
          <div>
            <h3 className="text-sm font-medium mb-2">Deployment Instructions</h3>
            <div className={`p-4 rounded-lg ${isDark ? 'bg-gray-800' : 'bg-gray-50'}`}>
              <ol className="list-decimal list-inside space-y-2 text-sm">
                <li>Download all configuration files</li>
                <li>Make the network script executable: <code>chmod +x network.sh</code></li>
                <li>Create a chaincode directory: <code>mkdir -p chaincode/asset-transfer-basic/chaincode-go</code></li>
                <li>Start the network: <code>./network.sh up</code></li>
                <li>Create a channel: <code>./network.sh createChannel</code></li>
                <li>Deploy chaincode: <code>./network.sh deployCC</code></li>
              </ol>
              <div className="mt-4 flex items-start">
                <Terminal className="h-4 w-4 mr-2 mt-1 text-indigo-500" />
                <span className="text-sm">
                  For more options, run: <code>./network.sh -h</code>
                </span>
              </div>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default NetworkConfigExport;